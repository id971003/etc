made by 7rzr, update 2023-12-10

게임 제작 후 출시했는데 제작과정에서 불편했던 세팅 값이나 출시후 잡지못해 발견한 오류 들 정리할 것 이다.


Script Execution Order [ 스크립트 순서 제어] 의존하지말자
	작성했던 싱글톤 타입 코드들이 다른 여타 스크립트들보다 빠르게 셋업되야해 [Default Time 보다 앞에] 싱글톤 타입 코드들을 만들때마다  Default Time 보다 앞에 오
	에디터상 	설정을 했어야했다. 실수많고 불편하다. 코드는 유니티 에디터 상 설정과 별도로 항상 작동해야한다.
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

List 는 참조형태다
	당연하고 중요하다고만 들었지 처음 격는 오류였다.
	유저 데이터와 별도로 관리되는 게임 데이터 중 List 타입으로 관리되는 데이터를 불러올때 LIst a = GameData.SomeThingList 로 불러와 a 값 수정하다 게임 데이터가 변동되어 이후 게임내용터져버렸다.
	LIst a = GameData.SomeThingList.ToList 로하면 되는건뎅..
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


싱글톤 관리하는 싱글톤 생각보다 유용하다.
	예를들어 DataManager, SceneManager, SoundManager, UserDataManager 가 있다고 한다면 이동된 씬에서 이용할때 다 하나씩 미리 캐싱해 사용 하고있었는데 이거 아주아주 귀찮다.
	크게 SingleToonManager 안에 캐싱해 넣고 SingleToonManager 에 접근 후 이용하자 
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


Enum 난발하면 머리 깨진다.
	변수 타입 다 Enum 으로 받아왔다. 편할줄 알았지 . 근데 이게 순서한번 꼬이니까 답도 없다. Enum 쓸땐 Enum 정리 파일 하나 만들든지 해서 순서 착각 하는일 없이하자.
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

컨텐츠 코드 와 로직코드 '완벽'한 분리.
	분리 이유
	1. 작업자가 다수 고 작업 파트가 다를때 기획자가 건들 작업물의 분리 [ 아직 경험못함 1인개발만했는걸?]
	2. 컨텐츠 코드는 대부분 "" 처리 되니 ide 상에서 수정이 불편함 [~~~+"증가" , ~~~"%증가"]
	2번 을 이번에 느꼈는데 조오오오오온나 힘들다 증가 > %증가로 바꿨는데 안바뀐거 개많고 아주 열받았다. 반드시 종속성 없게 만들자.
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

이름좀 생각좀하고 잘 설정하자 해깔려죽겠다.
	RankingData, RankingUserData /RadeData, SaveRadeData ...
	이따구로 이름을 지으니 도대체 뭘 뜻하는지 모르겠어서 쓸때마다 f12 처눌러서 확인하고 자빠젔다. 아주 개떡같고 창피하지만 어쩌겠나 다음부터안해야지
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
	
비슷한 성격의 데이터 구조[Class Struct 등 데이터구조 용어가 맞는지는몰겠다] 만들땐 기존꺼에 추가하는게 더 편할듯.
	RankingData라는 Class 에는 UserName 가 없었다. 근디 하나를 UserName 이 필요한 경우가생겨 RankingData 랑 비슷한데 UserName  이 추가된 Class 하나만들었다.
	두개 아주 토나올뻔했다. LIst안에 저 Class 집어넣고 랭킹으로 관리하고 거기서 유저이름 받아와서 순위권으로 보상주는데 List 에 들어가있는친구는 UserName 없고 받아와야하니 또 하나 만들어서 받아오고
	수정하기 귀찮으니 그냥 가따쓰다 일커지니 수정하려 보니 너무범위 방대하고 .. 문제 느꼈을때 수정하자
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

최적화랑 다르게 일단 최선이 우선이다.
	최적화에대한 현시점 관점은 하지말자 이다. [2023.12.10] 왜냐면 해도 거기서 거기니 시간 쓰지말고 빨리 진도 빼는게 이득이니까.
	근디 뭔가 메모리최적화와 다르게 코드 구조적이나 진짜 국소범위로 
	변수명이라도 작성시점을 넘어선순간 [작성시점에 문제가보이면 당연히 바로수정] 에 
	수정사항이 눈에 보이는순간 그냥 바로 수정하자 일커진다.
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

유저들의 데이터들이라도 반드시 초기화 해주자 
	int 는 초기값이 0 이다 string 은 비어있을꺼고 이러하게 다 디폴트 값이 있으니 신경도 안썼다.
	근데 테스트 과정에서 막 테스트 코드 들어가있고 인스팩터 상에서 값 수정해놓으니 출시 후 초기 데이터가 디폴트 값이 아닌 경우가 있었다.[미첬지아주]
	그냥 초기화 함수 하나만들어서 신나게 초기화하고 맘대로 테스트하자
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

테스트 코드 지우자 제발
	테스트 코드 남아있다. 존나 많다. 진짜 많다. 이곳저곳 다있다. 지우자
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

구조 잡을때 한번만 더 생각하자.
	코드 구조를 잡는 시간투자의 가치가 없다고 생각했다[내가 잘 못하니까?]
	많은 시간 투자는 분명 과소비일 태지만 초기에 구조를 잡고 도식과 해놓고 가시성 좋게 정리 해 놓을 필요성은있다.
	왜? 작업기간이 1달이내면 상관없는데 길어지면 과거의 내가 뭔 짓을 했는지 모르겠다.

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

코드정리 "#region" 잘하자..
	이번정리의 하이라이트다. 진짜 토나올뻔했다. 
	Clear  이후 로직과 Fail 이후 로직이 있다, 이둘은 이후 로직이 존재하는데 문제는 내가 UI 라는 친구를 따로 정리한거다
	그래서 Clear -Clear 로직1 - Ui_clear - Clear로직2 이따구로 코드 사이클이 돌아갔다.
	좀더 신경써서 정리했으면 10%는 작업 시간이 줄었을꺼다.








